%YAML 1.2
---
name: LSL
scope: source.lsl
comment: 'Linden Scripting Language of Second Life'
file_extensions: lsl
first_line_match: (?:\b(?:default)\b(?:\s*\{)?)

variables:
  # TODO: Add more bailouts.
  storage_type: (?:float|integer|key|list|quaternion|rotation|string|vector)
  identifier: (?:[A-Za-z_]\w*)

  constant_language: \b(?:P(?:R(?:IM_(?:M(?:EDIA_(?:MAX_(?:W(?:HITELIST_(?:COUNT|SIZE)|IDTH_PIXELS)|HEIGHT_PIXELS|URL_LENGTH)|P(?:ERM(?:_(?:(?:ANY|N)ONE|GROUP|OWNER)|S_(?:INTERACT|CONTROL))|ARAM_MAX)|A(?:UTO_(?:SCALE|LOOP|PLAY|ZOOM)|LT_IMAGE_ENABLE)|C(?:ONTROLS(?:_(?:STANDARD|MINI))?|URRENT_URL)|W(?:HITELIST(?:_ENABLE)?|IDTH_PIXELS)|H(?:EIGHT_PIXELS|OME_URL)|FIRST_CLICK_INTERACT)|ATERIAL(?:_(?:PLASTIC|RUBBER|FLESH|GLASS|METAL|STONE|WOOD))?)|S(?:C(?:ULPT_(?:TYPE_(?:(?:SPHER|PLAN)E|CYLINDER|TORUS|MASK)|FLAG_(?:INVERT|MIRROR))|RIPTED_SIT_ONLY)|HINY_(?:MEDIUM|HIGH|NONE|LOW)|I(?:T_TARGET|ZE)|PECULAR|LICE)|BUMP_(?:S(?:T(?:UCCO|ONE)|UCTION|IDING|HINY)|B(?:RI(?:CKS|GHT)|LOBS|ARK)|(?:(?:LARGE)?TIL|NON)E|C(?:ONCRETE|HECKER)|D(?:ISKS|ARK)|W(?:EAVE|OOD)|GRAVEL)|T(?:YPE(?:_(?:S(?:CULPT|PHERE)|T(?:ORUS|UBE)|CYLINDER|PRISM|RING|BOX))?|E(?:X(?:GEN(?:_(?:DEFAULT|PLANAR))?|T(?:URE)?)|MP_ON_REZ))|P(?:H(?:YSICS(?:_SHAPE_(?:(?:NON|TYP)E|CONVEX|PRIM))?|ANTOM)|O(?:S(?:_LOCAL|ITION)|INT_LIGHT)|ROJECTOR)|AL(?:PHA_MODE(?:_(?:(?:EMISSIV|NON)E|BLEND|MASK))?|LOW_UNSIT)|HOLE_(?:(?:(?:TRIANG|CIRC)L|SQUAR)E|DEFAULT)|F(?:ULLBRIGHT|LEXIBLE)|ROT(?:_LOCAL|ATION)|N(?:ORMAL|AME)|LINK_TARGET|COLOR|OMEGA|DESC|GLOW)|OFILE_(?:SCRIPT_MEMORY|NONE))|A(?:RCEL_(?:FLAG_(?:ALLOW_(?:(?:CREATE(?:_GROUP)?_OBJEC|SCRIP)TS|GROUP_(?:OBJECT_ENTRY|SCRIPTS)|(?:ALL_OBJECT_ENTR|FL)Y|TERRAFORM|LANDMARK|DAMAGE)|USE_(?:(?:LAND_PASS|BAN)_LIST|ACCESS_(?:GROUP|LIST))|RESTRICT_PUSHOBJECT|LOCAL_SOUND_ONLY)|DETAILS_(?:S(?:CRIPT_DANGER|EE_AVATARS)|LANDING_(?:LOOKA|POIN)T|PRIM_(?:CAPACITY|USED)|TP_ROUTING|FLAGS|GROUP|OWNER|AREA|DESC|NAME|ID)|MEDIA_COMMAND_(?:A(?:UTO_ALIGN|GENT)|T(?:EXTUR|IM|YP)E|LOOP(?:_SET)?|P(?:AUSE|LAY)|U(?:NLOAD|RL)|S(?:IZE|TOP)|DESC)|COUNT_(?:T(?:OTAL|EMP)|O(?:TH|WN)ER|SELECTED|GROUP))|Y(?:MENT_INFO_(?:ON_FILE|USED)|_(?:DEFAULT|HIDE))|SS(?:_(?:IF_NOT_HANDLED|ALWAYS|NEVER)|IVE)|TROL_PAUSE_AT_WAYPOINTS)|SYS_(?:PART_(?:B(?:F_(?:ONE(?:_MINUS_(?:SOURCE_(?:ALPHA|COLOR)|DEST_COLOR))?|SOURCE_(?:ALPHA|COLOR)|DEST_COLOR|ZERO)|LEND_FUNC_(?:SOURCE|DEST)|OUNCE_MASK)|(?:INTERP_(?:COLOR|SCALE)|TARGET_(?:LINEAR|POS)|RIBBON|WIND)_MASK|E(?:ND_(?:ALPHA|COLOR|SCALE|GLOW)|MISSIVE_MASK)|F(?:OLLOW_(?:VELOCITY|SRC)_MASK|LAGS)|START_(?:ALPHA|COLOR|SCALE|GLOW)|MAX_AGE)|SRC_(?:PATTERN(?:_(?:ANGLE(?:_CONE(?:_EMPTY)?)?|EXPLODE|DROP))?|BURST_(?:SPEED_M(?:AX|IN)|RA(?:DIUS|TE)|PART_COUNT)|A(?:NGLE_(?:BEGIN|END)|CCEL)|T(?:ARGET_KEY|EXTURE)|MAX_AGE|OMEGA))|U(?:_(?:FAILURE_(?:(?:(?:PARCEL_)?UNREACHABL|TARGET_GON)E|NO_(?:VALID_DESTINATION|NAVMESH)|DYNAMIC_PATHFINDING_DISABLED|INVALID_(?:START|GOAL)|OTHER)|(?:SLOWDOWN_DISTANCE|GOAL)_REACHED|EVADE_(?:SPOTTED|HIDDEN))|RSUIT_(?:(?:INTERCEP|OFFSE)T|GOAL_TOLERANCE|FUZZ_FACTOR)|BLIC_CHANNEL)|ERM(?:ISSION_(?:T(?:R(?:IGGER_ANIMATION|ACK_CAMERA)|AKE_CONTROLS|ELEPORT)|(?:OVERRIDE_ANIMATION|RETURN_OBJECT)S|(?:SILENT_ESTATE_MANAGEMEN|DEBI)T|C(?:ONTROL_CAMERA|HANGE_LINKS)|ATTACH)|_(?:MO(?:DIFY|VE)|TRANSFER|COPY|ALL))|I(?:NG_PONG|_BY_TWO)?)|O(?:BJECT_(?:R(?:E(?:TURN_(?:PARCEL(?:_OWNER)?|REGION)|Z(?:ZER_KEY|_TIME)|NDER_WEIGHT)|(?:UNNING_SCRIPT_COUN|O?O)T)|T(?:E(?:XT(?:_(?:ALPHA|COLOR))?|MP_(?:ATTACHED|ON_REZ))|OTAL_(?:INVENTORY|SCRIPT)_COUNT)|A(?:NIMATED_(?:SLOTS_AVAILABLE|COUNT)|TTACHED_(?:SLOTS_AVAILABLE|POINT)|CCOUNT_LEVEL)|S(?:(?:E(?:LECT_COUN|RVER_COS)|TREAMING_COS|IT_COUN)T|C(?:RIPT_(?:MEMORY|TIME)|ALE))|P(?:H(?:YSICS(?:_COST)?|ANTOM)|RIM_(?:EQUIVALENCE|COUNT)|ATHFINDING_TYPE|OS)|C(?:REAT(?:ION_TIME|OR)|HARACTER_TIME|LICK_ACTION)|L(?:AST_OWNER_ID|INK_NUMBER)|(?:BODY_SHAPE_TYP|NAM)E|MA(?:TERIAL|SS)|GROUP(?:_TAG)?|O(?:MEGA|WNER)|UNKNOWN_DETAIL|HOVER_HEIGHT|VELOCITY|DESC)|PT_(?:(?:(?:EXCLUSION|MATERIAL)_VOLUM|(?:STATIC_OBSTAC|WALKAB)L)E|(?:(?:CHARACT|OTH)E|AVATA)R|LEGACY_LINKSET))|C(?:HA(?:RACTER_(?:A(?:CCOUNT_FOR_SKIPPED_FRAMES|VOIDANCE_MODE)|MAX_(?:(?:AC|DE)CEL|TURN_RADIUS|SPEED)|CMD_(?:(?:SMOOTH_)?STO|JUM)P|TYPE(?:_(?:[ABCD]|NONE))?|DESIRED(?:_TURN)?_SPEED|STAY_WITHIN_PARCEL|ORIENTATION|LENGTH|RADIUS)|NGED_(?:TE(?:LEPORT|XTURE)|REGION(?:_START)?|(?:COLO|OWNE)R|S(?:CAL|HAP)E|ALLOWED_DROP|INVENTORY|MEDIA|LINK))|AMERA_(?:P(?:OSITION(?:_(?:L(?:OCKED|AG)|THRESHOLD))?|ITCH)|FOCUS(?:_(?:L(?:OCKED|AG)|THRESHOLD|OFFSET))?|BEHINDNESS_(?:ANGLE|LAG)|(?:DISTANC|ACTIV)E)|ONT(?:ROL_(?:R(?:OT_(?:RIGH|LEF)|IGH)T|(?:ML_LBUTTO|DOW)N|L(?:BUTTON|EFT)|BACK|FWD|UP)|ENT_TYPE_(?:(?:X(?:HT)?|HT)ML|(?:ATO|FOR)M|JSON|LLSD|TEXT|RSS))|LICK_ACTION_(?:OPEN(?:_MEDIA)?|(?:PL?A|BU)Y|DISABLED|TOUCH|NONE|ZOOM|SIT))|A(?:TTACH_(?:H(?:UD_(?:TOP_(?:(?:RIGH|LEF)T|CENTER)|BOTTOM(?:_(?:RIGH|LEF)T)?|CENTER_[12])|IND_[LR]FOOT|EAD)|R(?:H(?:AND(?:_RING1)?|IP)|L(?:ARM|LEG)|U(?:ARM|LEG)|E(?:AR|YE)|IGHT_PEC|SHOULDER|FOOT|WING)|L(?:H(?:AND(?:_RING1)?|IP)|E(?:FT_PEC|AR|YE)|L(?:ARM|LEG)|U(?:ARM|LEG)|SHOULDER|FOOT|WING)|FACE_(?:LE(?:AR|YE)|RE(?:AR|YE)|TONGUE|JAW)|TAIL_(?:BASE|TIP)|AVATAR_CENTER|B(?:ELLY|ACK)|CH(?:EST|IN)|N(?:ECK|OSE)|PELVIS|GROIN|MOUTH)|GENT(?:_(?:A(?:TTACHMENTS|LWAYS_RUN|UTOPILOT|WAY)|LIST_(?:PARCEL(?:_OWNER)?|REGION)|B(?:Y_(?:LEGACY_|USER)NAME|USY)|(?:CROUCH|WALK|FLY|TYP)ING|S(?:CRIPTED|ITTING)|MOUSELOOK|ON_OBJECT|IN_AIR))?|VOID_(?:(?:DYNAMIC_OBSTACLE|CHARACTER)S|NONE)|LL_SIDES|NIM_ON|CTIVE)|VE(?:HICLE_(?:FLAG_(?:HOVER_(?:(?:TERRAIN|WATER|UP)_ONLY|GLOBAL_HEIGHT)|LIMIT_(?:ROLL_ONLY|MOTOR_UP)|MOUSELOOK_(?:STEER|BANK)|CAMERA_DECOUPLED|NO_DEFLECTION_UP)|LINEAR_(?:MOTOR_(?:D(?:ECAY_TIMESCALE|IRECTION)|TIMESCALE|OFFSET)|DEFLECTION_(?:EFFICIENCY|TIMESCALE)|FRICTION_TIMESCALE)|ANGULAR_(?:MOTOR_(?:D(?:ECAY_TIMESCALE|IRECTION)|TIMESCALE)|DEFLECTION_(?:EFFICIENCY|TIMESCALE)|FRICTION_TIMESCALE)|TYPE_(?:(?:AIRPLA|NO)NE|B(?:ALLOON|OAT)|SLED|CAR)|B(?:ANKING_(?:EFFICIENCY|TIMESCALE|MIX)|UOYANCY)|VERTICAL_ATTRACTION_(?:EFFICIENCY|TIMESCALE)|HOVER_(?:EFFICIENCY|TIMESCALE|HEIGHT)|REFERENCE_FRAME)|RTICAL)|S(?:T(?:ATUS_(?:(?:NOT_(?:SUPPORTE|FOUN)|WHITELIST_FAILE)D|B(?:LOCK_GRAB(?:_OBJECT)?|OUNDS_ERROR)|R(?:ETURN_AT_EDGE|OTATE_[XYZ])|DIE_AT_(?:NO_ENTRY|EDGE)|PH(?:ANTOM|YSICS)|MALFORMED_PARAMS|INTERNAL_ERROR|TYPE_MISMATCH|SANDBOX|OK)|RING_TRIM(?:_(?:HEAD|TAIL))?)|KY_(?:S(?:UN(?:_TEXTURE)?|TAR_BRIGHTNESS)|(?:AMBIEN|PLANE|LIGH)T|CLOUD(?:_TEXTURE|S)|MOON(?:_TEXTURE)?|(?:BLU|DOM|HAZ)E|TEXTURE_DEFAULTS|G(?:AMMA|LOW)|REFRACTION)|I(?:T_(?:NO(?:_(?:EXPERIENCE_PERMISSION|SIT_TARGET|ACCESS)|T_EXPERIENCE)|INVALID_(?:(?:OBJEC|AGEN)T|LINK))|M_STAT_PCT_CHARS_STEPPED)|C(?:RIPTED|ALE)|MOOTH|QRT2)|R(?:E(?:GION_FLAG_(?:BLOCK_(?:FLY(?:OVER)?|TERRAFORM)|ALLOW_D(?:IRECT_TELEPORT|AMAGE)|DISABLE_(?:COLLISION|PHYSIC)S|RESTRICT_PUSHOBJECT|FIXED_SUN|SANDBOX)|MOTE_DATA_(?:RE(?:QUEST|PLY)|CHANNEL)|QUIRE_LINE_OF_SIGHT|STITUTION|VERSE)|C(?:_(?:REJECT_(?:(?:NON)?PHYSICAL|(?:AGENT|TYPE)S|LAND)|GET_(?:LINK_NUM|ROOT_KEY|NORMAL)|D(?:ETECT_PHANTOM|ATA_FLAGS)|MAX_HITS)|ERR_(?:CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN))|AD_TO_DEG|OTATE)|E(?:NV(?:_(?:NO(?:_(?:E(?:XPERIENCE_(?:PERMISSION|LAND)|NVIRONMENT)|PERMISSIONS)|T_EXPERIENCE)|INVALID_(?:AGENT|RULE)|VALIDATION_FAIL|THROTTLE)|IRONMENT_DAYINFO)|STATE_ACCESS_(?:ALLOWED_(?:AGENT_(?:REMOVE|ADD)|GROUP_(?:REMOVE|ADD))|BANNED_AGENT_(?:REMOVE|ADD))|RR_(?:(?:(?:RUNTIME|PARCEL)_PERMISSION|MALFORMED_PARAM)S|THROTTLED|GENERIC)|OF)|L(?:I(?:NK(?:SETDATA_(?:E(?:(?:MEMOR|NOKE)Y|PROTECTED)|NO(?:TFOUND|UPDATE)|(?:DELE|UPDA)TE|RESET|OK)|_(?:ALL_(?:CHILDREN|OTHERS)|(?:ROO|SE)T|THIS))|ST_STAT_(?:S(?:UM(?:_SQUARES)?|TD_DEV)|M(?:(?:E(?:DI)?A|I)N|AX)|GEOMETRIC_MEAN|NUM_COUNT|RANGE))|AND_(?:R(?:EVERT|AISE)|L(?:EVEL|OWER)|SMOOTH|NOISE)|OOP)|XP_ERROR_(?:(?:(?:EXPERIENCE(?:_(?:SUSPEND|DISABL)|S_DISABL)|(?:MATURITY|QUOTA)_EXCEED|THROTTL)E|KEY_NOT_FOUN)D|NO(?:T_(?:PERMITTE(?:D_LAN)?|FOUN)D|(?:_EXPERIENC|N)E)|RE(?:QUEST_PERM_TIMEOUT|TRY_UPDATE)|INVALID_(?:EXPERIENCE|PARAMETERS)|STOR(?:AGE_EXCEPTION|E_DISABLED)|UNKNOWN_ERROR)|T(?:YPE_(?:IN(?:TEGER|VALID)|ROTATION|STRING|VECTOR|FLOAT|KEY)|EXTURE_(?:(?:TRANSPAREN|DEFAUL)T|PLYWOOD|BLANK|MEDIA)|R(?:AVERSAL_TYPE(?:_(?:FAST|NONE|SLOW))?|UE)|OUCH_INVALID_(?:TEXCOORD|VECTOR|FACE)|P_ROUTING_(?:LANDINGP|BLOCKED|FREE)|ARGETED_EMAIL_OBJECT_OWNER|WO_PI)|I(?:NVENTORY_(?:S(?:ETTING|CRIPT|OUND)|(?:BODYPAR|OBJEC)T|A(?:NIMATION|LL)|(?:GES|TEX)TURE|NO(?:TECARD|NE)|CLOTHING|LANDMARK)|MG_USE_BAKED_(?:L(?:EFT(?:ARM|LEG)|OWER)|H(?:AIR|EAD)|AUX[123]|SKIRT|UPPER|EYES))|H(?:TTP_(?:(?:EXTENDED_ERRO|CUSTOM_HEADE)R|VER(?:BOSE_THROTTLE|IFY_CERT)|BODY_(?:MAXLENGTH|TRUNCATED)|(?:USER_AGEN|ACCEP)T|M(?:IMETYPE|ETHOD)|PRAGMA_NO_CACHE)|ORIZONTAL)|WA(?:TER_(?:(?:WAVE_DIRE|REFRA)CTION|NORMAL_(?:TEXTUR|SCAL)E|TEXTURE_DEFAULTS|BLUR_MULTIPLIER|F(?:RESNEL|OG))|NDER_PAUSE_AT_WAYPOINTS)|KFM_(?:C(?:MD_(?:P(?:AUSE|LAY)|STOP)|OMMAND)|R(?:OTATION|EVERSE)|TRANSLATION|PING_PONG|FORWARD|DATA|LOOP|MODE)|D(?:ATA_(?:SIM_(?:(?:STATU|PO)S|RATING)|(?:ONLIN|NAM)E|PAYINFO|BORN)|E(?:BUG_CHANNEL|G_TO_RAD|NSITY))|JSON_(?:(?:DELET|FALS|TRU)E|A(?:PPEND|RRAY)|NU(?:MBER|LL)|INVALID|OBJECT|STRING)|G(?:CNP_(?:RADIUS|STATIC)|RAVITY_MULTIPLIER)|MASK_(?:(?:EVERYON|BAS)E|GROUP|OWNER|NEXT)|F(?:ORCE_DIRECT_PATH|RICTION|ALSE)|URL_REQUEST_(?:GRANT|DENI)ED|ZERO_(?:ROTATION|VECTOR)|NULL_KEY)\b
  constant_numeric_float: |-
    (?xi)                               # ignore whitespace and case
    # TODO: valid float range: 1.401298464E-45 to 3.402823466E+38
    (?:\B[-+])?
    (?:
      (?:
        \B\.[0-9]+|                     # e.g. .999
        \b(?:
          [1-9]+[0-9]*|
          0
        )\.(?:[0-9]+)?                  # e.g. 999.999
      )(?:e[-+]?[1-9]+[0-9]*)? |        # e.g. base float with exponent
      (?:
        \b(?:
          [1-9]+[0-9]*|
          0
        )(?:e[-+]?[1-9]+[0-9]*)         # e.g. base integer with exponent
      )
    )
  constant_numeric_integer_hexadecimal: |-
    (?xi)                               # ignore whitespace and case
    (?:\B[-+])?
    (?:
      \b0x\h*                           # hex
    )
  constant_numeric_integer_decimal: |-
    (?x)                                # ignore whitespace
    # TODO: valid integer range: −2,147,483,648 to +2,147,483,647
    (?:\B[-+])?
    (?:
      \b[1-9]+[0-9]*|                   # e.g. 999
      \b0                               # e.g. 0
    )

  event: (?:l(?:i(?:nk(?:_message|set_data)|sten)|and_collision(?:_(?:start|end))?)|t(?:ouch(?:_(?:start|end))?|ransaction_result|imer)|c(?:o(?:llision(?:_(?:start|end))?|ntrol)|hanged)|e(?:xperience_permissions(?:_denied)?|mail)|r(?:un_time_permissions|emote_data)|no(?:t_a(?:t_ro)?t_target|_sensor)|s(?:tate_e(?:ntry|xit)|ensor)|mo(?:ving_(?:start|end)|ney)|at(?:(?:_rot)?_target|tach)|http_re(?:sponse|quest)|o(?:bject|n)_rez|path_update|dataserver)\b
  function_builtin: \bll(?:G(?:e(?:t(?:R(?:egion(?:(?:Moo|Su)n(?:Direc|Rota)tion|Time(?:Dilation|OfDay)|Day(?:Length|Offset)|F(?:lags|PS)|AgentCount|Corner|Name)|o(?:ot(?:Posi|Rota)tion|t))|P(?:arcel(?:M(?:axPrims|usicURL)|Prim(?:Owners|Count)|(?:Detail|Flag)s)|(?:rim(?:Media|itive)Param|o)s|ermissions(?:Key)?|hysicsMaterial)|S(?:ta(?:t(?:icPath|us)|rtParameter)|u(?:n(?:Direc|Rota)tion|bString)|im(?:ulatorHostname|Stats)|c(?:ript(?:Stat|Nam)|al)e|PMaxMemory)|L(?:i(?:nk(?:N(?:umber(?:OfSides)?|ame)|PrimitiveParams|Media|Key)|st(?:EntryType|Length))|ocal(?:Pos|Rot)|andOwnerAt)|A(?:n(?:imation(?:Override|List)?|dResetTime)|gent(?:L(?:anguage|ist)|Info|Size)|ttached(?:List)?|ccel|lpha)|O(?:bject(?:(?:AnimationName|Mas)s|P(?:rimCount|ermMask)|De(?:tails|sc)|LinkKey|Name)|wner(?:Key)?|mega)|M(?:a(?:xScaleFactor|ss(?:MKS)?)|oon(?:Direc|Rota)tion|inScaleFactor|emoryLimit)|Inventory(?:(?:AcquireTim|Typ)e|N(?:umber|ame)|PermMask|Creator|Key)|E(?:xperience(?:ErrorMessage|Details)|n(?:v(?:ironment)?|ergy))|N(?:umberOf(?:(?:NotecardLin|Sid)e|Prim)s|otecardLine|extEmail)|C(?:amera(?:Pos|Rot)|losestNavPoint|(?:reat|ol)or|enterOfMass)|T(?:exture(?:(?:Offse|Ro)t|Scale)?|ime(?:OfDay|stamp)?|orque)|D(?:a(?:y(?:Length|Offset)|te)|isplayName)|U(?:se(?:dMemory|rname)|nixTime)|F(?:ree(?:Memory|URLs)|orce)|G(?:eometricCenter|MTclock)|V(?:isualParams|el)|BoundingBox|HTTPHeader|Wallclock|Key)|nerateKey)|round(?:(?:Norma|Repe)l|Contour|Slope)?|ive(?:Inventory(?:List)?|Money))|S(?:e(?:t(?:L(?:ink(?:PrimitiveParams(?:Fast)?|Texture(?:Anim)?|C(?:amera|olor)|(?:Alph|Medi)a)|ocalRot)|P(?:(?:rim(?:Media|itive)Param|o)s|a(?:rcelMusicURL|yPrice)|hysicsMaterial)|Ve(?:hicle(?:(?:Rotation|Vector)Param|Fl(?:oatParam|ags)|Type)|locity)|C(?:amera(?:(?:Eye|At)Offset|Params)|o(?:ntentType|lor)|lickAction)|A(?:n(?:imationOverride|gularVelocity)|gentEnvironment|lpha)|S(?:ound(?:Queueing|Radius)|c(?:riptStat|al)e|itText|tatus)|T(?:ext(?:ure(?:Anim)?)?|o(?:uchText|rque)|imerEvent)|R(?:e(?:moteScriptAccessPin|gionPos)|ot)|(?:Environmen|HoverHeigh|MemoryLimi)t|(?:Forc(?:eAndTorqu)?|Damag)e|Object(?:Desc|Name)|KeyframedMotion|Buoyancy)|n(?:sor(?:Re(?:move|peat))?|dRemoteData))|t(?:op(?:(?:MoveToTarge|LookA)t|(?:Object)?Animation|Hover|Sound)|ring(?:T(?:oBase64|rim)|Length)|ar(?:tObjec)?tAnimation)|c(?:ale(?:ByFactor|Texture)|ript(?:Profil|Dang)er)|i(?:t(?:OnLink|Target)|n)|HA(?:256|1)String|a(?:meGroup|y)|ubStringIndex|(?:hou|qr)t|leep)|R(?:e(?:quest(?:(?:Experience)?Permissions|S(?:imulatorData|ecureURL)|(?:Inventory|Agent)Data|U(?:ser(?:name|Key)|RL)|DisplayName)|mo(?:ve(?:FromLand(?:Pass|Ban)List|VehicleFlags|Inventory)|te(?:LoadScriptPin|DataReply))|set(?:(?:Land(?:Pass|Ban)Lis|(?:Other)?Scrip)t|(?:AnimationOverrid|Tim)e)|(?:place(?:Agent)?Environmen|z(?:AtRoo|Objec))t|turnObjectsBy(?:Owner|ID)|lease(?:Controls|URL)|gionSay(?:To)?|adKeyValue)|o(?:t(?:2(?:A(?:ngle|xis)|Euler|Left|Fwd|Up)|Target(?:Remove)?|ateTexture|Between|LookAt)|und))|L(?:i(?:st(?:2(?:(?:Intege|Vecto)r|List(?:Strided)?|(?:Floa|Ro)t|String|Json|CSV|Key)|R(?:eplaceList|andomize)|en(?:Control|Remove)?|(?:Insert|Find)List|S(?:tatistics|ort))|n(?:k(?:setData(?:(?:(?:Coun|Lis)t|Find)Keys|Re(?:a(?:dProtecte)?d|set)|Delete(?:Protected)?|Write(?:Protected)?|Available)|ParticleSystem|SitTarget)|ear2sRGB))|o(?:o(?:pSound(?:Master|Slave)?|kAt)|g(?:10)?|adURL))|D(?:e(?:t(?:ected(?:T(?:ouch(?:(?:Bin|N)ormal|Face|Pos|ST|UV)|ype)|(?:LinkNumb|Own)er|Gr(?:oup|ab)|Name|Key|Pos|Rot|Vel)|achFromAvatar)|lete(?:Sub(?:String|List)|Character|KeyValue))|ataSizeKeyValue|umpList2String|i(?:alog|e))|A(?:(?:vatarOn(?:Link)?SitTarge|x(?:isAngle|es)2Ro)t|(?:pply(?:Rotational)?Impuls|gentInExperienc)e|d(?:dToLand(?:Pass|Ban)List|justSoundVolume)|t(?:tachToAvatar(?:Temp)?|an2)|(?:ngleBetwee|si)n|llowInventoryDrop|(?:co|b)s)|P(?:a(?:r(?:celMedia(?:CommandList|Query)|seString(?:KeepNulls|2List)|ticleSystem)|(?:ss(?:Collision|Touche)|trolPoint)s)|laySound(?:Slave)?|u(?:shObject|rsue)|reloadSound|ow)|T(?:a(?:rget(?:edEmail|Remove|Omega)?|keControls|n)|r(?:iggerSoun(?:dLimite)?d|ansferLindenDollars)|e(?:leportAgent(?:GlobalCoords|Home)?|xtBox)|o(?:Low|Upp)er)|C(?:l(?:ear(?:(?:Link|Prim)Media|CameraParams)|oseRemoteDataChannel)|reate(?:Character|KeyValue|Link)|o(?:llision(?:Filter|Sound)|s)|SV2List|astRay|eil|har)|M(?:a(?:nageEstateAccess|pDestination)|o(?:d(?:ifyLand|Pow)|veToTarget)|essageLinked|inEventDelay|D5String)|E(?:(?:xecCharacterCm|jectFromLan|dgeOfWorl)d|scapeURL|uler2Rot|mail|vade)|O(?:penRemoteDataChannel|(?:verMyLan|r)d|ffsetTexture|wnerSay)|B(?:ase64To(?:Integer|String)|reak(?:AllLinks|Link))|U(?:pdate(?:Character|KeyValue)|n(?:escapeURL|Sit))|In(?:s(?:tantMessage|ertString)|tegerToBase64)|F(?:l(?:eeFrom|oor)|orceMouselook|rand|abs)|Json(?:(?:[GS]etValu|ValueTyp)e|2List)|V(?:ec(?:Dist|Norm|Mag)|olumeDetect)|W(?:a(?:nderWithin|ter)|hisper|ind)|Key(?:(?:Count|s)KeyValu|2Nam)e|H(?:TTPRe(?:sponse|quest)|ash)|Na(?:vigateTo|me2Key)|sRGB2Linear|XorBase64)\b
  invalid: \b(?:ll(?:S(?:et(?:(?:Inventory|Object)PermMask|PrimURL)|oun(?:dPreloa)?d|topPointAt)|Re(?:mote(?:DataSetRegion|LoadScript)|freshPrimURL|leaseCamera)|C(?:l(?:earExperiencePermissions|oud)|ollisionSprite)|(?:G(?:etExperienceLis|odLikeRezObjec)|PointA)t|Make(?:F(?:ountain|ire)|Explosion|Smoke)|XorBase64Strings(?:Correct)?|OpenFloater|TakeCamera)|P(?:ERMISSION_(?:RE(?:LEASE_OWNERSHIP|MAP_CONTROLS)|CHANGE_(?:PERMISSION|JOINT)S)|SYS_SRC_(?:O(?:BJ_REL_MASK|UTERANGLE)|INNERANGLE)|RIM_(?:MATERIAL_LIGHT|CAST_SHADOWS))|S(?:KY_(?:(?:ABSORPTION|RAYLEIGH|MIE)_CONFIG|(?:DENSITY_PROFILE_COUNT|TRACK)S)|TATUS_CAST_SHADOWS)|LAND_(?:MEDIUM|LARGE|SMALL)_BRUSH|TARGETED_EMAIL_ROOT_CREATOR|VEHICLE_FLAG_NO_FLY_UP|ATTACH_[LR]PEC|DATA_RATING|event)\b

####################################################################################################################

contexts:
  prototype:
    - include: comments
   
  comments:
    - match: '//'
      scope: punctuation.definition.comment.lsl
      push:
        - meta_scope: comment.line.double-slash.lsl
        - match: $\n?
          pop: true
    - match: '/\*'
      scope: punctuation.definition.comment.begin.lsl
      push:
        - meta_scope: comment.block.lsl
        - match: '\*/'
          scope: punctuation.definition.comment.end.lsl
          pop: true

  main:
    - include: state_declaration
    - include: event_declaration
    - include: userfunction_declaration
    - include: string_quoted_double
    - include: constant_language
    - include: constant_numeric
    - include: keyword_operator
    - include: types_vars
    - match: ';'
      scope: punctuation.terminator.statement.lsl

  state_declaration:
    - match: '\b((?:state)\s+{{identifier}}|default)\b'
      scope: keyword.declaration.state.lsl
      push:
        - state_declaration_meta
        - state_declaration_block
     
  state_declaration_meta:
    - meta_scope: meta.state.lsl
    - match: ''
      pop: true

  state_declaration_block:
    - match: \{
      scope: punctuation.section.block.begin.lsl
      set: state_declaration_block_body
    - match: (?=\S)
      pop: true

  state_declaration_block_body:
    - meta_scope: meta.state.body.lsl
    - match: \}
      scope: punctuation.section.block.end.lsl
      pop: true
    - include: main

  event_declaration:
    - match: \b({{event}})\b\s*(\()
      captures:
        1: support.function.event.lsl entity.name.class
        2: punctuation.section.group.begin.lsl
      push: [event_body, event_params]

  event_params:
    - meta_content_scope: meta.event.parameters.lsl
    - include: types_vars
    - match: ','
      scope: punctuation.separator.comma.lsl
    - match: '\)'
      scope: meta.event.parameters.lsl punctuation.section.block.parameters.end.lsl
      pop: true

  event_body:
    - meta_scope: meta.event.lsl
    - match: '(?=\{)'
      set:
        - match: \{
          scope: punctuation.section.block.begin.lsl
          set:
            - meta_scope: meta.event.body.lsl
            - match: \}
              scope: punctuation.section.block.end.lsl
              pop: true
            - include: code_block_in

  code_block_in:
    - match: (?=\S)
      push: line_of_code

  line_of_code:
    - match: \b(if)\b
      captures:
        1: keyword.control.conditional.if.lsl
      set: [else_block, if_block, if_condition]
    - match: \b(for)\s*(\()
      captures:
        1: keyword.control.loop.for.lsl
        2: meta.group.lsl punctuation.section.group.begin.lsl
      set: [for_block, line_of_code_in, line_of_code_in, line_of_code_in]
    - match: \bdo\b
      scope: keyword.control.loop.do.lsl
      set: [do_condition, while_block]
    - match: \bwhile\b
      scope: keyword.control.loop.while.lsl
      set: [while_block, while_condition]
    - match: \breturn\b
      scope: keyword.control.flow.return.lsl
      set: line_of_code_in
    - match: '\b(jump)\s+({{identifier}})\s*(;)'
      captures:
        1: keyword.control.flow.jump.lsl
        2: variable.other.lsl #constant.other.label.lsl
        3: punctuation.terminator.statement.lsl
      pop: true
    - match: '(@)\s*({{identifier}})\s*(\;)'
      captures:
        1: keyword.control.flow.lsl
        2: variable.other.lsl #entity.name.target.lsl
        3: punctuation.terminator.statement.lsl
      pop: true
    - match: '\b(state)\s+({{identifier}})\s*(;)'
      captures:
        1: keyword.control.state.lsl
        2: variable.other.lsl #meta.target.class.state.lsl
        3: punctuation.terminator.statement.lsl
      pop: true
    - match: '(?=\S)'
      set: line_of_code_in

  line_of_code_in:
    - include: line_of_code_in_no_semicolon
    - match: ';'
      scope: punctuation.terminator.statement.lsl
      pop: true
    - match: (?=\S)
      pop: true

  line_of_code_in_no_semicolon:
    - match: '\b({{function_builtin}})\b\s*(\()'
      scope: meta.function-call.lsl
      captures:
        1: support.function.builtin.lsl
        2: meta.group.lsl punctuation.section.group.begin.lsl
      push: [function_call_arguments, arguments]
    - match: '\b{{invalid}}\b'
      scope: invalid.lsl deprecated.lsl
    - match: \b({{identifier}})\b\s*(\()
      scope: meta.function-call.lsl
      captures:
        1: entity.name.function.lsl
        2: meta.group.lsl punctuation.section.group.begin.lsl
      push: [function_call_arguments, arguments]
    - include: string_quoted_double
    - include: keyword_operator
    - include: constant_language
    - include: constant_numeric
    - include: casts
    - include: types_vars
    - match: \(
      scope: punctuation.section.group.begin.lsl
      push:
        - match: \)
          scope: punctuation.section.group.end.lsl
          pop: true
        - include: line_of_code_in_no_semicolon

  function_call_arguments:
    - meta_content_scope: meta.function-call.arguments.lsl meta.group.lsl
    - match: \)
      scope: meta.function-call.lsl meta.function-call.arguments.lsl meta.group.lsl punctuation.section.group.end.lsl
      pop: true
    - match: ''
      pop: true

  arguments:
    - match: (?=\))
      pop: true
    - match: ',' #TODO: This scope is never applied.
      scope: punctuation.separator.argument.lsl
    - match: ;
      scope: invalid.illegal.expected-close-paren.lsl
      pop: true
    - match: (?=\S)
      push:
        - include: line_of_code_in_no_semicolon
        - match: (?=[;)])
          pop: true

  if_condition:
    - match: '\s*(\()'
      captures:
        1: meta.group.lsl punctuation.section.group.begin.lsl
      set:
        - meta_content_scope: meta.group.lsl
        - match: '\s*(\))'
          captures:
            1: meta.group.lsl punctuation.section.group.end.lsl
          pop: true
        - include: line_of_code_in
    - match: (?=[^(])
      pop: true

  if_block:
    - match: \{
      scope: meta.block.lsl punctuation.section.block.begin.lsl
      set:
        - meta_content_scope: meta.block.lsl
        - match: \}
          scope: meta.block.lsl punctuation.section.block.end.lsl
          pop: true
        - include: code_block_in
    - match: (?=\S)
      set:
        - match: (?=else\b)
          pop: true
        - include: line_of_code

  else_block:
    - match: (else\s+if)\b\s*
      captures:
        1: keyword.control.conditional.elseif.lsl
      push: [if_block, if_condition]
    - match: (else)\s*
      scope: keyword.control.conditional.else.lsl
      set:
        - match: \s*(\{)
          captures:
            1: meta.block.lsl punctuation.section.block.begin.lsl
          set:
            - meta_content_scope: meta.block.lsl
            - match: \}
              scope: meta.block.lsl punctuation.section.block.end.lsl
              pop: true
            - include: code_block_in
        - match: (?=\S)
          set: line_of_code
    - match: (?=\S)
      pop: true

  for_block:
    - meta_content_scope: meta.group.lsl
    - match: \)
      scope: punctuation.section.group.end.lsl
      set:
      - match: \{
        scope: punctuation.section.block.begin.lsl
        set:
          - meta_scope: meta.block.lsl
          - match: \}
            scope: punctuation.section.block.end.lsl
            pop: true
          - include: code_block_in
      - match: (?=\S)
        set:
          - include: line_of_code

  do_condition:
    - match: \b(while)\b
      scope: keyword.control.loop.while.lsl
      set: while_condition
    - match: (?=\S)
      pop: true

  while_condition:
    - match: \(
      scope: punctuation.section.group.begin.lsl
      set:
        - meta_scope: meta.group.lsl
        - match: '\)'
          scope: punctuation.section.group.end.lsl
          pop: true
        - include: line_of_code_in
    - match: (?=\S)
      pop: true

  while_block:
    - match: \{
      scope: punctuation.section.block.begin.lsl
      set:
        - meta_scope: meta.block.lsl
        - match: '\}'
          scope: punctuation.section.block.end.lsl
          pop: true
        - include: code_block_in
    - match: (?=\S)
      set:
        - include: line_of_code

  types_vars:
    - match: '\b({{storage_type}})\b'
      scope: storage.type.lsl
    - match: ({{identifier}})
      scope: variable.other.lsl

  casts:
    - match: '\(\s*({{storage_type}})\s*\)'
      captures:
        1: storage.type.cast.lsl

  userfunction_declaration:
    - match: (?:((?:\b({{storage_type}})\b\s+)?(?:\b({{identifier}})\b)))(?=\s*\()
      captures:
        2: storage.type.lsl
        3: entity.name.function.lsl
      push: [userfunction_body, userfunction_params]

  userfunction_params:
    - meta_content_scope: meta.function.parameters.lsl
    - match: \(
      scope: punctuation.section.block.parameters.begin.lsl
    - match: ({{storage_type}})
      scope: storage.type.lsl
      push:
        - match: ({{identifier}})
          scope: variable.other.lsl
          pop: true
        - match: (?=\S)
          pop: true
    - match: ','
      scope: punctuation.separator.comma.lsl
    - match: '\)'
      scope: meta.function.parameters.lsl punctuation.section.block.parameters.end.lsl
      pop: true
      
  userfunction_body:
    - meta_scope: meta.function.lsl
    - match: '(?=\{)'
      set:
        - match: \{
          scope: punctuation.section.block.begin.lsl
          set:
            - meta_scope: meta.function.body.lsl
            - match: \}
              scope: punctuation.section.block.end.lsl
              pop: true
            - include: code_block_in

  string_quoted_double:
    - match: '"'
      scope: punctuation.definition.string.begin.lsl
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.lsl
        - match: '"'
          scope: punctuation.definition.string.end.lsl
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.lsl
          pop: true
        - include: string_escaped

  string_escaped:
    - match: |-
        (?x)
        (?:
          (\\\\)|
          (\\\")|
          (\\n)|
          (\\t)|
          (\\.)
        )
      captures:
        1: constant.character.escape.back-slash.lsl
        2: constant.character.escape.double-quote.lsl
        3: constant.character.escape.new-line.lsl
        4: constant.character.escape.tab.lsl
        5: invalid.illegal.constant.character.escape.lsl

  constant_language:
    - match: \b({{constant_language}})\b
      scope: constant.language.lsl

  constant_numeric:
    - include: constant_numeric_float
    - include: constant_numeric_integer

  constant_numeric_float:
    - match: ({{constant_numeric_float}})
      scope: constant.numeric.float.lsl

  constant_numeric_integer:
    - match: ({{constant_numeric_integer_hexadecimal}})
      scope: constant.numeric.integer.hexadecimal.lsl
    - match: ({{constant_numeric_integer_decimal}})
      scope: constant.numeric.integer.decimal.lsl

  keyword_operator:
    - match: '\+\+'
      scope: keyword.operator.arithmetic.increment.lsl
    - match: '\-\-'
      scope: keyword.operator.arithmetic.decrement.lsl
    - match: '>>'
      scope: keyword.operator.bitwise.shift.left.signed.lsl
    - match: '<<'
      scope: keyword.operator.bitwise.shift.right.signed.lsl
    - match: '<='
      scope: keyword.operator.relational.less-equal.lsl
    - match: '>='
      scope: keyword.operator.relational.greater-equal.lsl
    - match: '&&'
      scope: keyword.operator.logical.and.lsl
    - match: '\|\|'
      scope: keyword.operator.logical.or.lsl
    - match: '~'
      scope: keyword.operator.bitwise.not.lsl
    - match: '\^'
      scope: keyword.operator.bitwise.xor.lsl
    - match: '&'
      scope: keyword.operator.bitwise.and.lsl
    - match: '\|'
      scope: keyword.operator.bitwise.or.lsl
    - match: '=='
      scope: keyword.operator.comparison.equal.value.lsl
    - match: '!='
      scope: keyword.operator.comparison.not-equal.value.lsl
    - match: '!(?!=)'
      scope: keyword.operator.logical.not.lsl
    - match: '<'
      scope: keyword.operator.relational.less.lsl
    - match: '>'
      scope: keyword.operator.relational.greater.lsl
    - match: '[%*+\/\-]='
      scope: keyword.operator.assignment.augmented.lsl
    - match: '='
      scope: keyword.operator.assignment.lsl
    - match: '[%*+\/\-]'
      scope: keyword.operator.arithmetic.lsl
